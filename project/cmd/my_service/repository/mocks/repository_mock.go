// Code generated by MockGen. DO NOT EDIT.
// Source: .\irepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	api "project/api"
	repository "project/cmd/my_service/repository"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockIRepository) AddItem(ctx context.Context, uuid uuid.UUID, item api.Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddItem", ctx, uuid, item)
}

// AddItem indicates an expected call of AddItem.
func (mr *MockIRepositoryMockRecorder) AddItem(ctx, uuid, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockIRepository)(nil).AddItem), ctx, uuid, item)
}

// GetItem mocks base method.
func (m *MockIRepository) GetItem(ctx context.Context, uuid uuid.UUID) (api.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, uuid)
	ret0, _ := ret[0].(api.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockIRepositoryMockRecorder) GetItem(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockIRepository)(nil).GetItem), ctx, uuid)
}

// GetItems mocks base method.
func (m *MockIRepository) GetItems(ctx context.Context) ([]repository.ItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx)
	ret0, _ := ret[0].([]repository.ItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockIRepositoryMockRecorder) GetItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockIRepository)(nil).GetItems), ctx)
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetConnMaxIdleTime mocks base method.
func (m *MockConfig) GetConnMaxIdleTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnMaxIdleTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetConnMaxIdleTime indicates an expected call of GetConnMaxIdleTime.
func (mr *MockConfigMockRecorder) GetConnMaxIdleTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnMaxIdleTime", reflect.TypeOf((*MockConfig)(nil).GetConnMaxIdleTime))
}

// GetConnMaxLifetime mocks base method.
func (m *MockConfig) GetConnMaxLifetime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnMaxLifetime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetConnMaxLifetime indicates an expected call of GetConnMaxLifetime.
func (mr *MockConfigMockRecorder) GetConnMaxLifetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnMaxLifetime", reflect.TypeOf((*MockConfig)(nil).GetConnMaxLifetime))
}

// GetDSN mocks base method.
func (m *MockConfig) GetDSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDSN indicates an expected call of GetDSN.
func (mr *MockConfigMockRecorder) GetDSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDSN", reflect.TypeOf((*MockConfig)(nil).GetDSN))
}

// GetMaxIdleConn mocks base method.
func (m *MockConfig) GetMaxIdleConn() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxIdleConn")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxIdleConn indicates an expected call of GetMaxIdleConn.
func (mr *MockConfigMockRecorder) GetMaxIdleConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxIdleConn", reflect.TypeOf((*MockConfig)(nil).GetMaxIdleConn))
}

// GetMaxOpenConn mocks base method.
func (m *MockConfig) GetMaxOpenConn() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxOpenConn")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxOpenConn indicates an expected call of GetMaxOpenConn.
func (mr *MockConfigMockRecorder) GetMaxOpenConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxOpenConn", reflect.TypeOf((*MockConfig)(nil).GetMaxOpenConn))
}
